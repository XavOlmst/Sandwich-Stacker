//------------------------------------------------------------------------------
// <auto-generated>
//     This code was auto-generated by com.unity.inputsystem:InputActionCodeGenerator
//     version 1.5.1
//     from Assets/PlayerControls.inputactions
//
//     Changes to this file may cause incorrect behavior and will be lost if
//     the code is regenerated.
// </auto-generated>
//------------------------------------------------------------------------------

using System;
using System.Collections;
using System.Collections.Generic;
using UnityEngine.InputSystem;
using UnityEngine.InputSystem.Utilities;

public partial class @PlayerControls: IInputActionCollection2, IDisposable
{
    public InputActionAsset asset { get; }
    public @PlayerControls()
    {
        asset = InputActionAsset.FromJson(@"{
    ""name"": ""PlayerControls"",
    ""maps"": [
        {
            ""name"": ""gameplay"",
            ""id"": ""858d311d-e3ab-4765-bfc3-4d92e901f7e8"",
            ""actions"": [
                {
                    ""name"": ""Middle-Left"",
                    ""type"": ""Button"",
                    ""id"": ""16a33688-f841-4761-bc76-0c7144e40ef6"",
                    ""expectedControlType"": ""Button"",
                    ""processors"": """",
                    ""interactions"": """",
                    ""initialStateCheck"": false
                },
                {
                    ""name"": ""Middle-Right"",
                    ""type"": ""Button"",
                    ""id"": ""a807f6e1-0961-4302-bffa-fc7ca04bfd71"",
                    ""expectedControlType"": ""Button"",
                    ""processors"": """",
                    ""interactions"": """",
                    ""initialStateCheck"": false
                },
                {
                    ""name"": ""Side-Left"",
                    ""type"": ""Button"",
                    ""id"": ""b486588c-6250-4cf5-9e5b-8f06d8f12d86"",
                    ""expectedControlType"": ""Button"",
                    ""processors"": """",
                    ""interactions"": """",
                    ""initialStateCheck"": false
                },
                {
                    ""name"": ""Side-Right"",
                    ""type"": ""Button"",
                    ""id"": ""480229c9-6eca-4d85-a841-99f885a3872f"",
                    ""expectedControlType"": ""Button"",
                    ""processors"": """",
                    ""interactions"": """",
                    ""initialStateCheck"": false
                }
            ],
            ""bindings"": [
                {
                    ""name"": """",
                    ""id"": ""6f10c699-c6ca-4d41-bf87-8ff303bbade9"",
                    ""path"": ""<Gamepad>/leftStickPress"",
                    ""interactions"": """",
                    ""processors"": """",
                    ""groups"": """",
                    ""action"": ""Middle-Left"",
                    ""isComposite"": false,
                    ""isPartOfComposite"": false
                },
                {
                    ""name"": """",
                    ""id"": ""98cff46c-91b4-4263-8ba5-30d60b76f2df"",
                    ""path"": ""<Keyboard>/s"",
                    ""interactions"": """",
                    ""processors"": """",
                    ""groups"": """",
                    ""action"": ""Middle-Left"",
                    ""isComposite"": false,
                    ""isPartOfComposite"": false
                },
                {
                    ""name"": """",
                    ""id"": ""f664cbbd-bbbd-48cf-a170-dcdba3a532de"",
                    ""path"": ""<Gamepad>/rightStickPress"",
                    ""interactions"": """",
                    ""processors"": """",
                    ""groups"": """",
                    ""action"": ""Middle-Right"",
                    ""isComposite"": false,
                    ""isPartOfComposite"": false
                },
                {
                    ""name"": """",
                    ""id"": ""df7e06c8-9938-47dc-b501-d8ae96c0e7e4"",
                    ""path"": ""<Keyboard>/k"",
                    ""interactions"": """",
                    ""processors"": """",
                    ""groups"": """",
                    ""action"": ""Middle-Right"",
                    ""isComposite"": false,
                    ""isPartOfComposite"": false
                },
                {
                    ""name"": """",
                    ""id"": ""dd157bb8-e73d-4316-b31d-42c764201100"",
                    ""path"": ""<Gamepad>/leftTrigger"",
                    ""interactions"": """",
                    ""processors"": """",
                    ""groups"": """",
                    ""action"": ""Side-Left"",
                    ""isComposite"": false,
                    ""isPartOfComposite"": false
                },
                {
                    ""name"": """",
                    ""id"": ""b49f7fd8-90c1-4bbb-9b7c-218f6cda430b"",
                    ""path"": ""<Keyboard>/a"",
                    ""interactions"": """",
                    ""processors"": """",
                    ""groups"": """",
                    ""action"": ""Side-Left"",
                    ""isComposite"": false,
                    ""isPartOfComposite"": false
                },
                {
                    ""name"": """",
                    ""id"": ""f64a30c8-dd5e-4965-b51d-8c8e12d187b0"",
                    ""path"": ""<Gamepad>/rightTrigger"",
                    ""interactions"": """",
                    ""processors"": """",
                    ""groups"": """",
                    ""action"": ""Side-Right"",
                    ""isComposite"": false,
                    ""isPartOfComposite"": false
                },
                {
                    ""name"": """",
                    ""id"": ""2fb81663-85e5-4b80-be81-bd613ac13144"",
                    ""path"": ""<Keyboard>/l"",
                    ""interactions"": """",
                    ""processors"": """",
                    ""groups"": """",
                    ""action"": ""Side-Right"",
                    ""isComposite"": false,
                    ""isPartOfComposite"": false
                }
            ]
        }
    ],
    ""controlSchemes"": []
}");
        // gameplay
        m_gameplay = asset.FindActionMap("gameplay", throwIfNotFound: true);
        m_gameplay_MiddleLeft = m_gameplay.FindAction("Middle-Left", throwIfNotFound: true);
        m_gameplay_MiddleRight = m_gameplay.FindAction("Middle-Right", throwIfNotFound: true);
        m_gameplay_SideLeft = m_gameplay.FindAction("Side-Left", throwIfNotFound: true);
        m_gameplay_SideRight = m_gameplay.FindAction("Side-Right", throwIfNotFound: true);
    }

    public void Dispose()
    {
        UnityEngine.Object.Destroy(asset);
    }

    public InputBinding? bindingMask
    {
        get => asset.bindingMask;
        set => asset.bindingMask = value;
    }

    public ReadOnlyArray<InputDevice>? devices
    {
        get => asset.devices;
        set => asset.devices = value;
    }

    public ReadOnlyArray<InputControlScheme> controlSchemes => asset.controlSchemes;

    public bool Contains(InputAction action)
    {
        return asset.Contains(action);
    }

    public IEnumerator<InputAction> GetEnumerator()
    {
        return asset.GetEnumerator();
    }

    IEnumerator IEnumerable.GetEnumerator()
    {
        return GetEnumerator();
    }

    public void Enable()
    {
        asset.Enable();
    }

    public void Disable()
    {
        asset.Disable();
    }

    public IEnumerable<InputBinding> bindings => asset.bindings;

    public InputAction FindAction(string actionNameOrId, bool throwIfNotFound = false)
    {
        return asset.FindAction(actionNameOrId, throwIfNotFound);
    }

    public int FindBinding(InputBinding bindingMask, out InputAction action)
    {
        return asset.FindBinding(bindingMask, out action);
    }

    // gameplay
    private readonly InputActionMap m_gameplay;
    private List<IGameplayActions> m_GameplayActionsCallbackInterfaces = new List<IGameplayActions>();
    private readonly InputAction m_gameplay_MiddleLeft;
    private readonly InputAction m_gameplay_MiddleRight;
    private readonly InputAction m_gameplay_SideLeft;
    private readonly InputAction m_gameplay_SideRight;
    public struct GameplayActions
    {
        private @PlayerControls m_Wrapper;
        public GameplayActions(@PlayerControls wrapper) { m_Wrapper = wrapper; }
        public InputAction @MiddleLeft => m_Wrapper.m_gameplay_MiddleLeft;
        public InputAction @MiddleRight => m_Wrapper.m_gameplay_MiddleRight;
        public InputAction @SideLeft => m_Wrapper.m_gameplay_SideLeft;
        public InputAction @SideRight => m_Wrapper.m_gameplay_SideRight;
        public InputActionMap Get() { return m_Wrapper.m_gameplay; }
        public void Enable() { Get().Enable(); }
        public void Disable() { Get().Disable(); }
        public bool enabled => Get().enabled;
        public static implicit operator InputActionMap(GameplayActions set) { return set.Get(); }
        public void AddCallbacks(IGameplayActions instance)
        {
            if (instance == null || m_Wrapper.m_GameplayActionsCallbackInterfaces.Contains(instance)) return;
            m_Wrapper.m_GameplayActionsCallbackInterfaces.Add(instance);
            @MiddleLeft.started += instance.OnMiddleLeft;
            @MiddleLeft.performed += instance.OnMiddleLeft;
            @MiddleLeft.canceled += instance.OnMiddleLeft;
            @MiddleRight.started += instance.OnMiddleRight;
            @MiddleRight.performed += instance.OnMiddleRight;
            @MiddleRight.canceled += instance.OnMiddleRight;
            @SideLeft.started += instance.OnSideLeft;
            @SideLeft.performed += instance.OnSideLeft;
            @SideLeft.canceled += instance.OnSideLeft;
            @SideRight.started += instance.OnSideRight;
            @SideRight.performed += instance.OnSideRight;
            @SideRight.canceled += instance.OnSideRight;
        }

        private void UnregisterCallbacks(IGameplayActions instance)
        {
            @MiddleLeft.started -= instance.OnMiddleLeft;
            @MiddleLeft.performed -= instance.OnMiddleLeft;
            @MiddleLeft.canceled -= instance.OnMiddleLeft;
            @MiddleRight.started -= instance.OnMiddleRight;
            @MiddleRight.performed -= instance.OnMiddleRight;
            @MiddleRight.canceled -= instance.OnMiddleRight;
            @SideLeft.started -= instance.OnSideLeft;
            @SideLeft.performed -= instance.OnSideLeft;
            @SideLeft.canceled -= instance.OnSideLeft;
            @SideRight.started -= instance.OnSideRight;
            @SideRight.performed -= instance.OnSideRight;
            @SideRight.canceled -= instance.OnSideRight;
        }

        public void RemoveCallbacks(IGameplayActions instance)
        {
            if (m_Wrapper.m_GameplayActionsCallbackInterfaces.Remove(instance))
                UnregisterCallbacks(instance);
        }

        public void SetCallbacks(IGameplayActions instance)
        {
            foreach (var item in m_Wrapper.m_GameplayActionsCallbackInterfaces)
                UnregisterCallbacks(item);
            m_Wrapper.m_GameplayActionsCallbackInterfaces.Clear();
            AddCallbacks(instance);
        }
    }
    public GameplayActions @gameplay => new GameplayActions(this);
    public interface IGameplayActions
    {
        void OnMiddleLeft(InputAction.CallbackContext context);
        void OnMiddleRight(InputAction.CallbackContext context);
        void OnSideLeft(InputAction.CallbackContext context);
        void OnSideRight(InputAction.CallbackContext context);
    }
}
